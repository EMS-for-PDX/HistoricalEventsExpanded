fix_variable_error = {
    save_scope_as = $ERROR$ 
    add_to_list = $ERROR$ 
    clear_variable_list = $ERROR$ 
    clear_saved_scope = $ERROR$ 
    set_variable = {name = $ERROR$ value = flag:$ERROR$} 
    set_global_variable = {name = $ERROR$ value = flag:$ERROR$}  
    if = {limit = {OR = {has_character_flag = $ERROR$ var:$ERROR$ = flag:$ERROR$}} remove_variable = $ERROR$ remove_global_variable = $ERROR$}
}


winwarfornowway_effect = {
	character:144000 = {
		create_title_and_vassal_change = {
			type = created #or whatever
			save_scope_as = change
		}
		title:k_norway = {
			change_title_holder = {
				holder = character:144000
				change = scope:change
			}
		}	
		title:c_telemark = { 
			change_title_holder = {
				holder = character:144000
				change = scope:change
			}
		}
		title:c_nedenes = { 
			change_title_holder = {
				holder = character:144000
				change = scope:change
			}	
		}
		title:c_agdeside = { 
			change_title_holder = {
				holder = character:144000
				change = scope:change
			}	
		}
		title:c_rogalandi = { 
			change_title_holder = {
				holder = character:144000
				change = scope:change
			}	
		}
		title:c_hordalandi = { 
			change_title_holder = {
				holder = character:144000
				change = scope:change
			}	
		}
		title:c_sogn = { 
			change_title_holder = {
				holder = character:144000
				change = scope:change
			}
		}
		resolve_title_and_vassal_change = scope:change

		trigger_event = {
			id = HEE_fairhair.7
			days = 10
		}
	}
}

norwegian_coalition_effect = {
	title:c_hordalandi.holder = { 
		every_character_war = {
			limit = {
				using_cb = fairhairconquest
				primary_defender = title:c_hordalandi.holder
				primary_attacker = title:c_vestfold.holder
			}
			add_defender = title:c_telemark.holder
			add_defender  = title:c_nedenes.holder
			add_defender  = title:c_agdeside.holder
			add_defender  = title:c_rogalandi.holder
			add_defender  = title:c_sogn.holder
		}
	}
	
	hidden_effect = {
		title:c_telemark.holder = { 
			change_liege = {
				liege = character:144000
				change = scope:change
			}	
		}
		title:c_nedenes.holder = { 
			change_liege = {
				liege = character:144000
				change = scope:change
			}	
		}
		title:c_agdeside.holder = { 
			change_liege = {
				liege = character:144000
				change = scope:change
			}	
		}
		title:c_rogalandi.holder = { 
			change_liege = {
				liege = character:144000
				change = scope:change
			}	
		}
		title:c_hordalandi.holder = { 
			change_liege = {
				liege = character:144000
				change = scope:change
			}	
		}
		title:c_sogn.holder = { 
			change_liege = {
				liege = character:144000
				change = scope:change
			}	
		}
	}
}

winwarforpechenegs_effect = {
	if = {
		limit = {
			title:e_caspian-pontic_steppe.holder = {
				NOT = {
					has_title = title:k_pontic_steppe
				}
			}
		}
		title:e_caspian-pontic_steppe.holder = {
			get_title = title:k_pontic_steppe
		}
	}
	if = {
		limit = {
			title:k_bulgaria.holder = {
				NOT = {
					has_title = title:k_moldavia
				}
			}
		}
		title:k_bulgaria.holder = {
			get_title = title:k_moldavia
		}
	}


	scope:defender = {
		every_sub_realm_county = {
			limit = {
				title_province = { geographical_region = custom_pechenegs }
			}
			add_to_temporary_list = countries_taken
		}
	}

	scope:attacker = {
		#giving away old lands
		every_held_title = {
			limit = {
				tier = tier_county
				NOT = {
					this = title:c_kalos_limen
					this = title:c_perekop
					this = title:c_oleshye
					title_province = { geographical_region = custom_pechenegs }
				}
			}
			save_temporary_scope_as = current_county
			create_character = {
				location = scope:current_county.title_province
				template = old_country_local_warlord_template
				save_temporary_scope_as = local_warlord
			}
			create_title_and_vassal_change = {
				type = usurped
				save_scope_as = change
				add_claim_on_loss = no
			}
			hidden_effect = {
				scope:current_county = {
					change_title_holder = {
						holder = scope:local_warlord
						change = scope:change
						take_baronies = yes
					}
				}
			}
			resolve_title_and_vassal_change = scope:change
			scope:local_warlord = {
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
			
				resolve_title_and_vassal_change = scope:change	
			}
		}

		#adding new taken lands
		create_title_and_vassal_change = {
			type = created #or whatever
			save_scope_as = change
		}
		every_in_list = {
			list = countries_taken
			change_title_holder = {
				holder = scope:attacker
				change = scope:change
				take_baronies = yes
			}
		}
		resolve_title_and_vassal_change = scope:change

		add_pressed_claim = title:d_muntenia
		add_pressed_claim = title:d_muntenia
	}
}

HEE_titular_title_make_primary = {
	if = {
		limit = {
			title:k_pechenegs.holder = {
				any_held_title = {
					tier >= tier_kingdom
					count > 1
				}
			} 
		}
		title:k_pechenegs.holder = {
			random_held_title = {
				limit = {
					tier >= tier_kingdom
					NOT = {
						this = title:k_pechenegs
					}
				}
				save_scope_as = destroying_title
			}
		}
		destroy_title = scope:destroying_title
	}
}

# split_ismali_and_imami_fatimids = {
# 	character:163026 = {
# 		create_title_and_vassal_change = {
# 			type = created
# 			save_scope_as = title_change
# 			add_claim_on_loss = no
# 		}
# 		title:d_shiite = {
# 			change_title_holder = {
# 				holder = character:163026
# 				change = scope:title_change
# 			}
# 		}
# 		resolve_title_and_vassal_change = scope:title_change
# 		set_primary_title_to = title:d_shiite

# 		faith = {
# 			remove_religious_head_title = yes
# 		}

# 		set_character_faith = faith:imami

# 		faith = {
# 			set_religious_head_title = title:d_shiite
# 		}
# 	}

# 	character:163022 = {
# 		set_character_faith_no_effect = faith:imami
# 	}
# 	character:163023 = {
# 		set_character_faith_no_effect = faith:imami
# 	}
# 	character:163024 = {
# 		set_character_faith_no_effect = faith:imami
# 	}
# 	character:163025 = {
# 		set_character_faith_no_effect = faith:imami
# 	}
# 	character:163045 = {
# 		set_character_faith_no_effect = faith:imami
# 	}
# }

# spawn_shia_caliphate = {
# 	character:163025 = {
# 		get_title = title:c_dhafra
# 		change_government = clan_government
# 		set_age = 56
# 		add_trait = ill
# 		add_trait = infertile
# 		add_trait = wounded_3
# 	}
# 	create_dynamic_title = {
# 		tier = duchy
# 		name = TwelverShiaCalphiate
# 	}
# 	create_title_and_vassal_change = {
# 		type = created
# 		save_scope_as = change
# 		add_claim_on_loss = no
# 	}
# 	scope:new_title = {
# 		set_capital_county = title:c_dhafra
# 		set_landless_title = yes
# 		set_no_automatic_claims = yes
# 		set_definitive_form = yes
# 		set_can_be_named_after_dynasty = no
# 		change_title_holder = {
# 			holder = character:163025
# 			change = scope:change
# 		}
# 	}

# 	resolve_title_and_vassal_change = scope:change
	

# 	scope:new_title = { 
# 		set_coa = d_shiite
# 		set_color_from_title = title:d_shiite
# 		copy_title_history = title:d_shiite
# 	}

# 	# scope:dhafraholder = {
# 	# 	get_title = title:c_dhafra
# 	# }

# 	character:163025 = {
# 		faith = {
# 			remove_religious_head_title = yes
# 		}
# 		set_character_faith = faith:imami

# 		faith = {
# 			set_religious_head_title = scope:new_title
# 			remove_doctrine = doctrine_no_head
# 			add_doctrine = doctrine_temporal_head
# 		}
# 		add_realm_law_skip_effects = same_faith_succession_law
# 		every_child = {
# 			set_character_faith = faith:imami
# 		}
# 	}

# 	scope:new_title = { 
# 		add_title_law = temporal_head_of_faith_succession_law
# 	}
# 	character:163026 = {
# 		trigger_event = {
# 			id = HEE_religious_spawns.7
# 			days = {500 700}
# 		}
# 	}

# 	character:163026 = {
# 		add_trait = infertile
# 	}
# }

feast_default_setup_effect = {
	scope:activity = { #The Feast
		activity_owner = {
			if = {
				limit = {
					exists = global_var:fairhairattendsfeast
					this = character:166329
					character:166044 = {
						is_alive = yes
						age >= 16
					}
					character:166329 = {
						is_alive = yes
						is_landed = yes
					}
					character:144000 = {
						is_alive = yes
						is_landed = yes
						NOT = {
							has_character_modifier = harald_tanglehairs_vow_modifier
						}
					}
				}
				trigger_event = {
					id = HEE_fairhair.2
					days = 1
				}
				debug_log = "Debug fired fairhair.2"
			}
			if = { #Is this a murder feast?
				limit = {
					exists = var:murder_feast
				}
				trigger_event = {
					id = feast_default.8000
					days = 3
				}
			}
			else = {
				trigger_event = {
					on_action = feast_default_host_event_selection
					days = feast_initial_event_delay
				}
			}
		}

		every_participant = { #Effect for remaining (most) guests
			limit = {
				NOT = { this = scope:activity.activity_owner }
			}
			if = { #Is this a murder feast?
				limit = {
					scope:activity.activity_owner = {
						exists = var:murder_feast
					}
				}
				#The event for the participants is triggered through the host's feast_default.8000
			}
			else = {
				trigger_event = {
					on_action = feast_default_event_selection
					days = feast_initial_event_delay
				}
			}
		}
	}
}

nomadic_migration_effect = {
	$INVADER$ = {
			
		every_liege_or_above = {
			limit = {
				any_held_title = {
						tier >= tier_empire
				}
			}
			save_scope_as = byzantine_emperor
		}
		hidden_effect = {
			if = {
				limit = {
					has_title = $TITLE_TARGET$
					any_held_title = {
						tier >= tier_kingdom
						count >= 2
					}
				}
				every_held_title = {
					limit = {
						tier >= tier_kingdom
						NOT = { this = $TITLE_TARGET$ }
					}
					save_temporary_scope_as = excess_kingdom
					$INVADER$ = { destroy_title = scope:excess_kingdom }
				}
			}
		}
		hidden_effect = {
			#All direct vassal non-Mogyers are given their independence, unless they hold land within Pannonia.
			every_vassal = {
				limit = {
					highest_held_title_tier >= tier_county
					any_held_title = {
						count = all
					}
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
			}
			#... And catch the stragglers. Has to be a separate effect block, or we'll ruin the de facto structure.
			every_vassal_or_below = {
				limit = {
					highest_held_title_tier >= tier_county
				}
				create_title_and_vassal_change = {
					type = independency
					save_scope_as = change
					add_claim_on_loss = no
				}
				becomes_independent = { change = scope:change }
				resolve_title_and_vassal_change = scope:change
			}
			#Reserve a duchy, preferring the capital, for $INVADER$.
			if = {
				limit = { $TITLE_TARGET$.title_capital_county.duchy.holder = $INVADER$ }
				$TITLE_TARGET$.title_capital_county.duchy = { save_scope_as = reserved_title }
			}
			#... Of course, if we can't have the capital for some reason, grab any random duchy in Pannonia.
			else = {
				random_held_title = {
					limit = {
						tier = tier_duchy
					}
					save_scope_as = reserved_title
				}
			}
			#Find all Mogyer vassals outside of Pannonia.
			every_vassal_or_below = {
				limit = {
					highest_held_title_tier >= tier_county
				}
				add_to_list = german_vassals_list
			}
			#Find all Pannonian titles held by $INVADER$ that aren't reserved.
			every_held_title = {
				limit = {
					#Technically we could use any_this_title_or_de_jure_above for the following two checks, but it was being problematic and this does the same thing (just more cumbersomely).
					OR = {
						tier = tier_county
						tier = tier_duchy
					}
					NOT = { this = scope:reserved_title }
				}
				add_to_list = spare_illyirian_titles_list
			}
			#Attempt to give out Pannonian holdings to the vassals who are about to lose land, prioritising players by tier, then NPCs by tier.
			##Now, process duchy title assignment.
			every_in_list = {
				list = german_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_ducal_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_ducal_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare ducal title, hand it over.
				if = {
					limit = {
						any_in_list = {
							list = spare_illyirian_titles_list
							tier = tier_duchy
							holder = $INVADER$
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_illyirian_titles_list
						limit = {
							tier = tier_duchy
							holder = $INVADER$
						}
						every_in_de_jure_hierarchy = {
							limit = {
								holder = $INVADER$
								tier >= tier_county
							}
							add_to_list = multiple_donated_titles
						}
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					every_in_list = {
						list = multiple_donated_titles
						save_temporary_scope_as = donated_title
						scope:donated_title = {
							change_title_holder = {
								holder = scope:receiving_vassal
								change = scope:change
							}
						}
						remove_from_list = multiple_donated_titles
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			##Finally, process county title assignment.
			###First, attempt to pair de facto sub-vassals to their lieges.
			every_in_list = {
				list = german_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare county title, hand it over.
				if = {
					#Try to pair vassals with their lieges first.
					limit = {
						#Direct vassals shouldn't bother to try pairing.
						NOT = { liege = $INVADER$ }
						any_in_list = {
							list = spare_illyirian_titles_list
							launch_hungarian_migration_sub_vassal_liege_pairing_trigger = yes
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_illyirian_titles_list
						limit = {
							#Direct vassals shouldn't bother to try pairing.
							NOT = { scope:receiving_vassal.liege = $INVADER$ }
							#Run the stock trigger.
							launch_hungarian_migration_sub_vassal_liege_pairing_trigger = yes
							#Don't give away the new liege's primary title's capital county.
							NOT = {	this = holder.primary_title.title_capital_county }
						}
						save_temporary_scope_as = donated_title
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:donated_title = {
						change_title_holder = {
							holder = scope:receiving_vassal
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			###Then, filter through any remaining direct vassals.
			every_in_list = {
				list = german_vassals_list
				#Players first.
				limit = {
					is_ai = no
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#NPCs after that.
				alternative_limit = {
					is_ai = yes
					launch_hungarian_migration_count_processing_trigger = yes
				}
				#Grab the appropriate vassal.
				save_temporary_scope_as = receiving_vassal
				#If $INVADER$ has a suitable spare county title, hand it over.
				if = {
					#Otherwise, grab any spare valid title that $INVADER$ has lying around.
					limit = {
						any_in_list = {
							list = spare_illyirian_titles_list
							launch_hungarian_migration_direct_vassal_requirements_trigger = { INVADER = $INVADER$ }
						}
					}
					#Save the suitable title.
					random_in_list = {
						list = spare_illyirian_titles_list
						limit = {
							launch_hungarian_migration_direct_vassal_requirements_trigger = { INVADER = $INVADER$ }
						}
						save_temporary_scope_as = donated_title
					}
					#Hand it to the receiving vassal.
					create_title_and_vassal_change = {
						type = granted
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:donated_title = {
						change_title_holder = {
							holder = scope:receiving_vassal
							change = scope:change
						}
					}
					resolve_title_and_vassal_change = scope:change
				}
			}
			##Clean-up: any landless characters should move to $INVADER$'s court.
			every_in_list = {
				list = german_vassals_list
				limit = { is_ruler = no}
				save_temporary_scope_as = landless_german_vassal
				$INVADER$ = { add_courtier = scope:landless_german_vassal }
			}
			#Sum all remaining territory outside of Pannonia & give that territory to created local characters.
			##Start by trying to group duchies.
			every_sub_realm_title = {
				#First we try to make duchy power blocks.
				if = {
					#Grab duchies outside of Pannonia.
					limit = {
						NOT = {
							title_province = { geographical_region = custom_roman_illyricum }
						}
						tier = tier_duchy
					}
					save_temporary_scope_as = seceding_duchy
					#Now grab the duchy & any sub-realm counties beneath it outside of Pannonia, and filter them to a list for processing.
					scope:seceding_duchy = {
						every_in_de_jure_hierarchy = {
							limit = {
								tier >= tier_county
								OR = {
									holder = $INVADER$
									holder = {
										any_liege_or_above = { this = $INVADER$ }
									}
								}
							}
							add_to_temporary_list = seceding_duchy_list
						}
					}
					#Create a local peasant warlord for the duchy & counties.
					create_character = {
						location = scope:seceding_duchy.title_capital_county.title_province
						template = post_migration_local_warlord_template
						save_scope_as = local_warlord
					}
					#Assign the seceding titles to the new peasant warlord.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					every_in_list = {
						list = seceding_duchy_list
						limit = {
							NAND = {
								tier = tier_county
								title_province = { geographical_region = custom_hungary }
							}
						}
						change_title_holder = {
							holder = scope:local_warlord
							change = scope:change
							take_baronies = yes
						}
						remove_from_list = seceding_duchy_list
					}
					resolve_title_and_vassal_change = scope:change
					#And give the warlord their independence.
					create_title_and_vassal_change = {
						type = usurped
						save_scope_as = change
						add_claim_on_loss = no
					}
					scope:local_warlord = {
						change_liege = { 
						liege = scope:byzantine_emperor
						change = scope:change }
					}
					resolve_title_and_vassal_change = scope:change
				}	
			}		
		}
		
	}
}